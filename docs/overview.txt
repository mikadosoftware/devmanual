* Underlying Principles 
** Psychological Safety is not Woke.
** products not projects 
** Plan a bit, code a lot, repeat.
** Always runnable - preprod is always up
** Simplify harder
** Build Great tools
** Test harder
** Code Reviews not Code Blockers
** Zero Bug methodology
** Make strategic bets on good tech
** abstractions at business level (TV Questions)
** culture of discussion, openly
** disaggregate management 
** people first
** no-one gets mad if the computer says no.
thats first part disaggregated mgmt - put rules in automation
then work product is floor raised all the time
means work product needs to be introspectabe (hence AI - it has made almost all human onowlwdge work intoeapecatble like code - hence work will go like code with teats and static analysis etx)


* Mis-en-place
** laptop builds / immutable workstation
** automated coding standards
** Team culture really really matters.
** Psychological safety - a one year contract does not mean much 
** coaching not directing (disaggregating management)
** Dont start thinking till you have started automating it.


* Version Control
** Branching Strategy (git.git, githubflow)
** Commit Message Guidelines - talk to me
** Pull Request (PR) Process
** Resolving Merge Conflicts
** ticket driven or ticket breadcrumbs. (next obvious step)


* Performance and Optimization
** make it work, make it right, make it fast
** Profiling and Debugging Tools
** Monitoring and Observability (APM, Logs, Metrics)
** Performance Testing, E2E and other, as part of CiCD

* Release management
** Go/NoGo - automated fail points (security, performance)
** automated all the way
** Tools, audience management etc - a release process and checklist (SOPs)
** Build from Scratch
** manage environments, manage expectations
** whole org test rig
 

* SDLC
** linting
** coverage
** security scanning
** unit testing
** whole org test rig
** No coding standards unless linter does it.
** DORA metrics
** punchclock
** discussions around code not projet dreams 
** linting
** static analysis https://github.com/PyCQA/bandit
** isort
** explore vs exploit. Never be in position where the quick docs fix takes less
** Jenkins
** artifact management
** Fail fast
** Code defines as much as you possibly can 
** submit queue / change queue

* documentation
** ReadTheDocs or equivalent
 

* Operations (Not DevOps) 
** Operations, Incident Mgmt, Audience Mgmt
** SLAs SLOs - the SRE problem
** runbooks, autoamtion, how
** Statistical Process Control in Operations
** AI analysis of operations
** Audience Mgmt
** Five Whys, honest reviews


* Testing and QA is a spectrum
** unittesting
** fuzzing
** at some point everything that can be auotamted out of the way should be done before you think.
** Whole Org Test rig

* Disaster recovery and Backup
** see 'build everything from scratch in docker on demand'

* Architecture and Design 
** C4 and contract design between C's
** "sufficient design upfront".
 

* Configuration Mgmt
** feature toggles and release mgmt
** what does "release to production" mean with toggles and config?
** a given config should be hashable so we have code hash plus config hash as stable
** repeatable builds - nix is trying to get there.


* Infrastructure (as code)
** Jenkins
** unit testing, test at IO boundaries,
** whole org test rig
** static analysis
** artifact mgmt
** monorepo vs microrepo
** build testing
** secrets (see vault etc)
** failfast,
** share deployment chunks - ie teams share jenkins snippets
** environment consistency
** metrics and reporting

* monitoring and observability
** grafana
** openTelemetry
** reporting,
** pagerduty
** QA and testing as part of this
** logging and centralised logging and log monitoring and scanning
** business event capturing
** combine Nasa OpenMCT and OpenTelemetry
** see cloudflare use of open telemetry to return logging
** logging

* Homelab vs cloud
** Why do this at all - all you need is cloud account
** build complete stack from scratch in docker
** Always have confidence and ability to rebuild

* Networking 
** CDN
** API Gateway and quotas
** HTTP Load Balancing
** DDOS protection (cloudflare)
** Firewall
** mininet, DNS TLS, CA, Certs, SPIFFE

* Security
** IAM
** Authentication
** Authorisation
** Accounting
** Zero trust
** HSM, client certs,
** WebAuthn, FIDO
** Certs, client certs,
** TLS is not good enough - channel is not per request authentication
** appsec -> shehackspurple
** FIDO webauthn
** NIST and SSDF (https://csrc.nist.gov/projects/ssdf) and Executive Order (EO)
14114
(https://www.federalregister.gov/documents/2025/01/17/2025-01470/strengthening-and-promoting-innovation-in-the-nations-cybersecurity)
** what does end 2 end mean? if regulator wants to see the message how to do
that?. Even politics is restricted by the technology.


* Storage
** NAS
** NFS
** SMB
** Backup
** Archive
** Recovery process

* SysAdmin
** log monitoring and analysis (promethues, event mgmt)
** event capture (logs, app events, business events) Prometheus
** NTP
** Aime / md5 sum of binaries

* Messaging
** Importance of workers and queues in almost everything
** RabbitMQ/celery/201
** workers and web services
** Autosys and distributed job management
** dependancy management
** git analysis tools
** basically 95% of designs are flows, with queues in the middle.


* Software Governance, Compliance, Democracy
** Trolley problem
** Mission, shareholder mission vs middle management
** Tactics operations strategy. See google and TPUS, vs Midway and aurcraft carriers. Strategy is politican level.  Operations is being disrupted
** evolving architecture - using fitness function (ie a code metric - SLOcs, cyclometeic complexiry, vulnerability measures, linting, (static)
** do not fall for Just-In-Time Agile - we will build the infrastructure when we
find a story to justify it - thats spedning too much time on waiting for
tactical stories to appear 

* Management Information Systems
** project mgmt, risk mgmt, planning, budgets
** Metrics is all, unfiltered.
** MIS is not for managers.
** Risk mgmt is all, keep a risk log before a gantt chart
** Dashboards out of observability
** Management is the place for statisical process control.
** statistics and stuff
** one level up, 2(O) 100x bigger
** is there a max number of chnages one can make per day?
** Twitter - can you really fire 90% of the devs?


* Databases, data structures
** choices - Size 
** sqllite is *fine*, Postgres should be default, pandas is *fine*
** Use dask
** Hadoop vs Postgres vs everything else
** getting a S3-like storage service
** Other services (RDBMS), HADOOP

* PeopleWare
** The book (TOm DeMarco)
** The principle - Dancing with Bears / Risk mgmt
** disaggregation of managemeent
** training, commitment

* Marketing
** Audience mgmt
** creativity
** selling upwards and sideways
** Just keep people aware
** openness makes a lot of sense

* Corporate, Startup
** The difference, and why it matters to DevManual

