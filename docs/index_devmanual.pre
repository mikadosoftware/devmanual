==================
The Software Mind
==================


Introduction
============

I have twenty years experience "in the trenches" of software
development - writing commercial and open source software for cutting
edge ISPs, major financial houses and not-for-profit organisations, in
big offices, tiny offices or on globally distributed teams.

And I have learnt a lot about what works, and what does not, when it
comes to getting software out of the door.  

Mostly this is not *how* to create software and
software teams, a lot of this book is about ... why.  Why is software
eating the world, why do certain practises work well and why do
certain pathologies still run in our organisations.

I call this *why*, The Software Mind.  The *how* is The Dev Manual.


The startup OS
---------------

Why is it so many startups start finding themselves writing code to do
what is not "core competency" why is oss not the fibres and muscles of
a business ?  why learn one saas after another?

envisage one set of protocols and code that runs almost every business
? can that work? seems likely

infrastructure as code?? 
business as code
programmabke company 

So, lets start with probably the most important idea - that of
Software Literacy.


{{ conceptchapters/sm_software_literacy.rst }}


{{ conceptchapters/dm_plumbing_ci.rst }}

{{ conceptchapters/sm_firms_coase_democracy.rst }}


{{ conceptchapters/dm_projects_tickets_todoinator.rst }}


{{ conceptchapters/dm_townplanning_governance.rst }}


{{ conceptchapters/dm_fractal_management.rst }}


{{ conceptchapters/sm_pikkety_social_regulation.rst }}


{{ conceptchapters/dm_team_morale_trust.rst }}

the 
{{ conceptchapters/sm_futuresoftwaretrends.rst }}

People, Process, Culture
========================
{{ conceptchapters/dm_culture_people_process.rst }}
{{ conceptchapters/landscapestrategy.rst }}

Conclusions
===========
{{ conceptchapters/conclusions.rst }}









A point about Pikety
--------------------

* Pikety redux

  - Labour lost, capital won (the reaosn wages not  subject to suply demand)
  - the great hollowing out
  - literacy and automation
  - Snowden was also right - data and pollution 
  - snowden
https://en.m.wikipedia.org/wiki/NSA_ANT_catalog
http://www.nsaplayset.org
- Whats happening in the world - a sense of perspective
* http://www.digitalattackmap.com/faq/
* also want, wars, trade, shipping, energy, employment, poverty, investment etc.* 
some kind of model / mapp for the whole world. where is the money flowing / going?


  That the record of software coming in to disrupt industry is good -
  it's hard to learn software.  As a company this book is about having
  software in your company DNA

A point about project management and democratic companies
---------------------------------------------------------

I am going to stick my neck out and go for it - companies will become
more democratic - we shall see more voting and consensus in the
workplace.  We will also see the end of deadlines as companies become
*event driven* - that is, instead of shouting "get to this point"
there will be more "we need to get here" and monitoring and
encouragement.


The problem is *always* at the top
----------------------------------

Most technical problems can be solved by changing the business environment.
If the security of a company is challenged because a top level executive refuses to follow
the security restrictions, then there is a clear choice betwene firing the Sales Director
or having security.  Only the Board can decide that, and once they do it must be clear.

Google is currently experiencing a similar issue over sexual harrassment.

Data publication




Fractal Management
------------------

How individuals and teams need to model, monitor, mentor.


- CI and repeatability
- reporting on functionality of running processes
- analysis of inputs, running, outputs
- reporting upwards and outwards
- marketing your code





security (secrets management & auth)
------------------------------------
-- user management / aithentication authorisation
-- FIDO


security (deployment / repeatability)
-------------------------------------


prod parallel
-------------
Modelling



-- plumbing







   


A point about Simplicity
========================


Our golden goal is to keep things simple.

Simple breaks in simple ways, simple is simple to extend and improve.

Its not that simple is *easy* - often it is the opposite of easy, or quick.

But simple wins out over time. Simple gives great ROI.

I throughly recommend listening to Rich Hickey on this subject (Link)

So please keep in mind - we aim for simple.  Even if our day to day
work pushes us to quick and easy and complicated.  We need to push
back.


Data Mangement  Philosophy
==========================

Data Publishing needs to be a business level function, providing
consistent accurate and timely data to the rest of the organisation is
a vital task.

Like Bezos, can only consume data that is published - and people only
publishbsokething they willing to support

"but i cannot get my job done if "... that's not the problem ... the
problem is clean data

it's like security - it's a priority or it is not.








.. rubric:: Footnotes

.. [#f1] The linked essay is by Eric S Raymond and is almost two
   decades old, and lays out an important philosophical difference
   between how open source software gets developed (in a mad press of new
   things being tried out) and how cathedrals are built.  The cathedral
   builders have tried to learn from the bazaar, and concepts like Agile
   are helping (a bit) but building software in our modern day
   institutions is still frustrating.  As software eats the world, it
   will find politics and push back.

