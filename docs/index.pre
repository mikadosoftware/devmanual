==================
The DevManual
==================

top level concerns
------------------

* CI / CD
* Infrastructure as code
* monitoring and observability
* SDLC, top down and bottom up
* Security and IAM
* Software Governance, Compliance, Democracy, Risk and Project Mgmt
* Management Information Systems
* SLAs, Operations, Incident Mgmt
* Testing and QA - a spectrum
* Disaster recovery and Backup
* COnfiguration Mgmt, feature toggles and release mgmt
* documentation, usability, 



* CI / CD
** Jenkins
** githubflow, gitgitflow, gitflow.  Tagging vs labels vs whats in which env
** unit testing, test at IO boundaries, 
** coverage
** whole org test rig
** linting
** static analysis
** artifact mgmt
** monorepo vs microrepo
** build testing
** secrets (see vault etc)
** failfast,
** share deployment chunks - ie teams share jenkins snippets
** single server to start ocnceptually - salt or ansible or terraform or whatever.
** docker / containerisation (leading to Nix)
** environment consistency
** metrics and reporting


* Infrastructure as code
** containers and orchestration
** DNS
** TLS, CA, Certs, 
** HA / DR / Horizontal scaling, caches
** build complete stack from scratch in docker
** API gateways, loadbalancing, quotas etc
** dont use kebernetes - or rather. Have your own deplyment process, that knows the names of servers. 
** chaosmonkey - have failback server names, cattle still have distinct identities, (cattle not pets, not same as virtual abstracts not pets)


* monitoring and observability
** grafana
** openTelemetry
** reporting, 
** pagerduty
** QA and testing as part of this
** logging and centralised logging and log monitoring and scanning
** business event capturing
** combine Nasa OpenMCT and OpenTelemetry
   Telemetry is everything in moving from IRL to Virtual.
   Telemetry of security swipes, logins, purcahses etc etc.
   simple data management - who owns the names under each layer of dots.
   company.site.greenfieldhouse.5thfloor.lights.powerusage
** see cloudflare use of open telemetry to return logging
use single otel collector on server instance for all monitoing 

* SDLC 
** git rebase
** tickets, JIRAS, tracking and reporting time
** punchclock
** discussions around code not ideas - one paragraph is enough to start
** linting
** static analysis https://github.com/PyCQA/bandit
** isort
** explore vs exploit. Never be in position where the quick docs fix takes less
time than the tickets and commits etc.  How to include small valuable fixes? 

* Security and IAM
** Certs, client certs,
** TLS is not good enough - chanell is not per request authentication
** appsec -> shehackspurple 
** FIDO webauthn
** 

https://medium.com/cryptomove/moving-target-defense-recent-trends-253ce784a680
MovingTargetDefence - this is lessons from WWI and tier one armies
https://eprint.iacr.org/2016/741.pdf


* Software Governance, Compliance, Democracy, Risk and Project Mgmt
** Trolley problem


* Management Information Systems
** one level up, 2(O) 100x bigger

* SLAs, Operations, Incident Mgmt
** SLAs SLOs - the SRE problem
** runbooks, autoamtion, how 

* Testing and QA - a spectrum
** unittesting
** fuzzing
** at some point everything that can be auotamted out of the way should be done before you think.

* Disaster recovery and Backup
** see 'build everything from scratch in docker on demand'

* COnfiguration Mgmt, feature toggles and release mgmt
** etcd, what does "release to production" mean with toggles and config?
** a given config should be hashable so we have code hash plus config hash as stable 


* documentation
** have osme




The plumbing list
-----------------

SMTP - use postmarkapp.com as sending out emails yourself now just gets you
banned.

LOgging - use centralised logging plus some audit friendly means preventing
corruption

authentication. I think webauthn, CA approaches. The only thing we can tust is
the maths


oauth 
https://news.ycombinator.com/item?id=41420783


- queues and queueing theory
- runbooks, prod support 
- trade off between urgency and robustness (promtiong code and FFS) 
- use of dashboards
- business metrics growing out of / related to tech metrics
- 


Operational Support

HolmesGPT - AI that can try to knit together different parts of failing
errors and provide easier root cause analysis.  sorta LLMs to check error
codes.https://news.ycombinator.com/item?id=41326039





mono repo / multi repo





Draw the rest of the f***ing Owl 

Twitter - can you really fire 90% of the devs?
What about all the other things that hurt at scale
3-4(O)

Scene: newsroom like his gorlmfrodsy
"write this down"
"i'm just carving the oencil"
"sharpening?"
"no carving, about to melt the metalnfor that little rubber holder in the end"

wait what? 


the devmanual is about everything 
needed for a software team to operate 
within a business or organisation,
everything *before* a line of code 
is written - the stuff every team 
needs or will benefit from, from 
CI/CD setup, review processes, etc




This is a book about filling in the missing gaps on how to 
be part of, setup, maintain, run, "self-manage" a software team / teams.
Its not about what programming language, its about how to deal with users, 
auditors, maangers, what is best practise and what is just theatre.

It flows from one point of view - the code is *everything*.
EaC - Everything As Code


What are the areas to work on?

* Infrastructure as code. vulnerability mgmt, red teams,
* SDLC
* SDLC interactions with business - feed into ticketing system
* case management systems
* Rules engines
* Data storage (elastic, RDBMS, hadoop, file system NAS)
* IAM
* CRM
* logging, error capture
* dashboarding, monitoring, escalation, prioritsation
* guiderails / controls / monitoring, escalation, golden source data,
* from golden source build models of company - whole org test rig
* regulatory and mgmt reporting
*



Dashboarding - you need some way of keeping eveerything in check.
Use RAG.  use RAG on RAG.

Forensics - if you dont act on errors now, you never will
infrastructure as code

CRM - customer relationship management - everything from notifying of
upgrades to demo days and feedback, netowrking, blogs and office hours.

IAM

Vulnerability mgmt



Measuring productivity
-------
https://news.ycombinator.com/item?id=40272186
Its hard. software is a creative acticity
even if the software is going to be used as a machine 
the building of a factory assembly line is 
front loaded into the factory cost. yet it is the most vital part of a factory
yet software is design a aseembly line everything




controls
automated check of state or other desirable situation and ability to
report and precent progress till actuon taken 

lexicon

servers 
workstations
standard builds

compounts

security
- CA self hosted / lets encrypt?
- approval system
- 

test rigging
- feature files / 
- teat generation 
- mitmproxy style teating
- break at network ans system boundaries
less at the unit level.


management 
- budgets
- approval system (purchase orders)
- future modelling (spreadsheet onwards)
- record and publish meetings
- MIS systems - event logging reporting
- 


project planning 
- whats the user need
- written press release and essay
- automated milestone achievement 

feature flag system 
- whole module hiding



- CI/CD
  - Jenkins
  - various linters
  - pre commot hooks

- ticketing

- operational support
  - ticketing 
  
- dashboards

- report

- logging and log capture
- event capture

- mesaging 
- device management 
- 

backing services
----------------
storage 
data platform (ETL/ hadoop)
RDBMS






web service 
https://www.nginx.com/blog/microservices-reference-architecture-nginx-twelve-factor-app/
12 factor app


project mgmt

I often find project managers and senior management wanting a “zipper” project - where some big brained architect predicts the future use cases and needs and can plan pulling together the teeth in 15 steps ahead

Which is of course rubbish - mostly it’s amazing if you can predict the next zip.

this is "next step or phase soace" projeft mgmt - what you can do next is defined by your previous choices - so improce optionality - make tools and platforms not topless or low code decisions 


Things shoukd be as simple as possiblenbutnnonsimpler
	

simplicity as a choice

A friend who was a photographer would explain
hownhe overcame his "imposter syndrome".
He has enormous amounts of "kit" (gear might be more photogenic)
but he just keeps one simple camera withbone lens
in thebcar - because he is capable of doing the big setup annie leobowotz stuff 
but he chooses simplicity most of thebtime

The devmanual is about simplicity as choice in being a software developer

this is not the guide to witing small bits of code aa a single developer

its a guide to writing large bodies of code as part of a larger 
usually corporate team(s)

throughout my career I have started or joined teams of people with a usually xorporate goal inmmind

often we thought we needed lots of kit - downloadongnhadoop and datalake setups
and this does matter - but its like lenses for my photogroaher friend - you can fo anhellmof anlong way with 
awk and cat and a but of thinking.

team started talking like a team

when we start talking like a team, when we have operations sorted
its all part of the same thing

its a devmanual - as simple as we can

Introduction
============

A 'DevManual' is the (usually barely understandable) documentation passed
to a new coder on thier first day, explaining "how we do things around here".

It *should* be comprehensive, it *should* explain *why* as well as *how.

It so often is not ...

But this is my attempt to provide a set of best practises, and guidelines.

If I could describe the idea in one line it is


All the component parts to running a software-literate, programmable company
with examples.


Walkthrough
-----------

0. Security
This is the most basic component. And it informs so much else
- HSM (phones and ubikeys)
- identity management on every request
- zero trust security
95% of the time security is doing the right thing well.  It's the
remaining 5% that is the hard costly trade offs.  We will come to
those later.
Use CAs for SSH 
Each docker build needs to trust various ssh clients 
see smallstep.com/blog/use-ssh-certificates

Use client certificates to handle web access
Use MFA to handle web access

Don't bother with passwords etc - ???


1. code development and deployment pipeline
deployment on untrusted machines


2. plumbing


{{ conceptchapters/dm_plumbing_ci.rst }}

{{ conceptchapters/dm_projects_tickets_todoinator.rst }}

{{ conceptchapters/dm_townplanning_governance.rst }}

{{ conceptchapters/dm_fractal_management.rst }}

{{ conceptchapters/dm_team_morale_trust.rst }}

{{ conceptchapters/dm_culture_people_process.rst }}

{{ conceptchapters/dm_data.rst }}


