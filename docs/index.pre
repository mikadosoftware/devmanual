==================
The DevManual
==================

project mgmt

I often find project managers and senior management wanting a “zipper” project - where some big brained architect predicts the future use cases and needs and can plan pulling together the teeth in 15 steps ahead

Which is of course rubbish - mostly it’s amazing if you can predict the next zip.

this is "next step or phase soace" projeft mgmt - what you can do next is defined by your previous choices - so improce optionality - make tools and platforms not topless or low code decisions 



Things shoukd be as simple as possiblenbutnnonsimpler
	

simplicity as a choice

A friend who was a photographer would explain
hownhe overcame his "imposter syndrome".
He has enormous amounts of "kit" (gear might be more photogenic)
but he just keeps one simple camera withbone lens
in thebcar - because he is capable of doing the big setup annie leobowotz stuff 
but he chooses simplicity most of thebtime

The devmanual is about simplicity as choice in being a software developer

this is not the guide to witing small bits of code aa a single developer

its a guide to writing large bodies of code as part of a larger 
usually corporate team(s)

throughout my career I have started or joined teams of people with a usually xorporate goal inmmind

often we thought we needed lots of kit - downloadongnhadoop and datalake setups
and this does matter - but its like lenses for my photogroaher friend - you can fo anhellmof anlong way with 
awk and cat and a but of thinking.

team started talking like a team

when we start talking like a team, when we have operations sorted
its all part of the same thing

its a devmanual - as simple as we can

Introduction
============

A 'DevManual' is the (usually barely understandable) documentation passed
to a new coder on thier first day, explaining "how we do things around here".

It *should* be comprehensive, it *should* explain *why* as well as *how.

It so often is not ...

But this is my attempt to provide a set of best practises, and guidelines.

If I could describe the idea in one line it is


All the component parts to running a software-literate, programmable company
with examples.


Walkthrough
-----------

0. Security
This is the most basic component. And it informs so much else
- HSM (phones and ubikeys)
- identity management on every request
- zero trust security
95% of the time security is doing the right thing well.  It's the
remaining 5% that is the hard costly trade offs.  We will come to
those later.
Use CAs for SSH 
Each docker build needs to trust various ssh clients 
see smallstep.com/blog/use-ssh-certificates

Use client certificates to handle web access
Use MFA to handle web access

Don't bother with passwords etc - ???


1. code development and deployment pipeline
deployment on untrusted machines


2. plumbing


{{ conceptchapters/dm_plumbing_ci.rst }}

{{ conceptchapters/dm_projects_tickets_todoinator.rst }}

{{ conceptchapters/dm_townplanning_governance.rst }}

{{ conceptchapters/dm_fractal_management.rst }}

{{ conceptchapters/dm_team_morale_trust.rst }}

{{ conceptchapters/dm_culture_people_process.rst }}

{{ conceptchapters/dm_data.rst }}


